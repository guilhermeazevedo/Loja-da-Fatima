package br.com.lojadafatima.InterfacesFinanceiro;

import br.com.lojadafatima.ClassesFerramentas.ClasseDatas;
import br.com.lojadafatima.ClassesFerramentas.GerenciadorCamposBotoes;
import br.com.lojadafatima.ClassesFerramentas.LimpaCamposTela;
import br.com.lojadafatima.ClassesFerramentas.MensagensUsuario;
import br.com.lojadafatima.ClassesFerramentas.Preenche;
import br.com.lojadafatima.CompraVendaOperacoes.ClasseProdutosCompraVenda;
import br.com.lojadafatima.ConexaoBDpostgre.ConexaoPostgre;
import br.com.lojadafatima.DadosPessoa.ClassePessoaFisica;
import br.com.lojadafatima.DadosPessoa.ClassePessoaJuridica;
import br.com.lojadafatima.Financeiro.ClasseMvtoCaixa;
import br.com.lojadafatima.Financeiro.ClasseParcelas;
import br.com.lojadafatima.InterfaceConsultaSimples.ConsulSimplesCliente;
import br.com.lojadafatima.InterfaceConsultaSimples.ConsulSimplesDetalhesConta;
import br.com.lojadafatima.InterfaceConsultaSimples.ConsulSimplesFornecedor;
import br.com.lojadafatima.InterfacesPessoa.InterfaceCliente;
import br.com.lojadafatima.InterfacesPessoa.InterfaceFornecedor;
import br.com.lojadafatima.Pessoa.ClasseCliente;
import br.com.lojadafatima.Pessoa.ClasseFornecedor;
import br.com.lojadafatima.Usuario.ClasseTelasUsuario;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.MaskFormatter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Guilherme Azevedo
 */
public class InterfaceContasReceber extends javax.swing.JDialog {

    private java.awt.Frame primeiratela;
    ClasseParcelas parcelas = new ClasseParcelas();
    Preenche preenche = new Preenche();
    LimpaCamposTela limpar = new LimpaCamposTela();
    GerenciadorCamposBotoes valida = new GerenciadorCamposBotoes();
    private ClasseTelasUsuario telasusuario = new ClasseTelasUsuario();
    ClasseFornecedor fornecedor = new ClasseFornecedor();
    ClasseCliente cliente = new ClasseCliente();
    MaskFormatter data;
    ClasseDatas datas = new ClasseDatas();
    MensagensUsuario msg = new MensagensUsuario();

    /**
     * Creates new form InterfaceContasReceber
     */
    public InterfaceContasReceber(java.awt.Frame telaorigem, boolean modal, ClasseTelasUsuario usuario) {
        super(telaorigem, modal);
        setPrimeiratela(telaorigem);
        initComponents();
        setTelasusuario(usuario);
        analisausuario();
        jNumberField1.setVisible(false);
        int[] tam = new int[2];
        tam[0] = 200;
        tam[1] = 100;
        preenche.FormataJtable(TbPessoas, tam);

        int[] tam2 = new int[7];
        tam2[0] = 70;
        tam2[1] = 70;
        tam2[2] = 70;
        tam2[3] = 70;
        tam2[4] = 70;
        tam2[5] = 70;
        tam2[6] = 70;
        preenche.FormataJtable(TbContas, tam2);

        int[] tam3 = new int[8];
        tam3[0] = 20;
        tam3[1] = 70;
        tam3[2] = 70;
        tam3[3] = 70;
        tam3[4] = 70;
        tam3[5] = 70;
        tam3[6] = 70;
        tam3[7] = 70;
        preenche.FormataJtable(TbParcelas, tam3);

        preenche.PreencheJComboBox(CbFormaPgto, parcelas.getFormapgto().retornaformapgtocombobox());
        preenche.PreencheJComboBox(CbOperacao, parcelas.getConta().getOperacao().retornaoperacoescombobox(true));
        RbClienteActionPerformed(null);
        TbContas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        TbParcelas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        TbPessoas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        PopDetalhes = new javax.swing.JPopupMenu();
        ItMnDetalhes = new javax.swing.JMenuItem();
        ItMnCancelar = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TbPessoas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TbContas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TbParcelas = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CbFormaPgto = new javax.swing.JComboBox();
        BtPagar = new javax.swing.JButton();
        TfValor = new JNumberField.JNumberField();
        BtCadFormaPgto = new javax.swing.JButton();
        CbBuscaEspecific = new javax.swing.JCheckBox();
        RbCliente = new javax.swing.JRadioButton();
        RbFornecedor = new javax.swing.JRadioButton();
        TfPessoa = new javax.swing.JTextField();
        TfCodPessoa = new javax.swing.JTextField();
        BtPesqPessoa = new javax.swing.JButton();
        LbCodPessoa = new javax.swing.JLabel();
        LbNomePessoa = new javax.swing.JLabel();
        BtCadPessoa = new javax.swing.JButton();
        BtPesqPessoas = new javax.swing.JButton();
        ChbOperacao = new javax.swing.JCheckBox();
        CbOperacao = new javax.swing.JComboBox();
        try{
            data = new MaskFormatter("##/##/####");
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Nao foi possivel localizar");
        }
        TfDtInicial = new JFormattedTextField(data);
        jLabel3 = new javax.swing.JLabel();
        try{
            data = new MaskFormatter("##/##/####");
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Nao foi possivel localizar");
        }
        TfDtFinal = new JFormattedTextField(data);
        ChbPeriodo = new javax.swing.JCheckBox();
        BtPesqContas = new javax.swing.JButton();
        ChbCtaAbertas = new javax.swing.JCheckBox();
        ChbCtaVencidas = new javax.swing.JCheckBox();
        ChbCtaPagas = new javax.swing.JCheckBox();
        BtPesqTodasPessoas = new javax.swing.JButton();
        BtImprParcelas = new javax.swing.JButton();
        try{
            data = new MaskFormatter("##/##/####");
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Nao foi possivel localizar");
        }
        TfDtPgto = new JFormattedTextField(data);
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        LbNotificacao = new javax.swing.JLabel();
        jNumberField1 = new JNumberField.JNumberField();
        BtImprContas = new javax.swing.JButton();

        jMenuItem1.setText("Estornar parcela");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        ItMnDetalhes.setText("Detalhes...");
        ItMnDetalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItMnDetalhesActionPerformed(evt);
            }
        });
        PopDetalhes.add(ItMnDetalhes);

        ItMnCancelar.setText("Cancelar operação");
        ItMnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItMnCancelarActionPerformed(evt);
            }
        });
        PopDetalhes.add(ItMnCancelar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Contas à Receber - Software Loja da Fátima");
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TbPessoas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome/Nome Fantasia", "Cliente ou Fornecedor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TbPessoas.getTableHeader().setReorderingAllowed(false);
        TbPessoas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TbPessoasMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(TbPessoas);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 137, 732, 93));

        jLabel1.setText("Contas da Pessoa:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 293, -1, -1));

        TbContas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código da Conta", "Operação", "Pessoa", "Condição de Pagamento", "Data", "Valor Total", "Situação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TbContas.setComponentPopupMenu(PopDetalhes);
        TbContas.getTableHeader().setReorderingAllowed(false);
        TbContas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TbContasMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(TbContas);
        if (TbContas.getColumnModel().getColumnCount() > 0) {
            TbContas.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 313, 732, 91));

        jLabel2.setText("Parcelas da Conta:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));

        TbParcelas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nrº Parcela", "Valor à Pagar(R$)", "Valor Pago(R$)", "Forma de pagamento", "Data à Pagar", "Data Pago", "Situação", "Reparcela da Parcela Numero"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TbParcelas.setComponentPopupMenu(jPopupMenu1);
        TbParcelas.getTableHeader().setReorderingAllowed(false);
        TbParcelas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TbParcelasMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(TbParcelas);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 441, 732, 86));

        jLabel4.setText("Valor à Pagar");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 533, -1, -1));

        jLabel6.setText("Forma de Pagamento");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(254, 533, -1, -1));

        jPanel1.add(CbFormaPgto, new org.netbeans.lib.awtextra.AbsoluteConstraints(254, 554, 297, -1));

        BtPagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/lojadafatima/Icones/dinheiro.png"))); // NOI18N
        BtPagar.setText("Pagar");
        BtPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtPagarActionPerformed(evt);
            }
        });
        jPanel1.add(BtPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 582, 100, -1));

        TfValor.setEnabled(false);
        TfValor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TfValorKeyTyped(evt);
            }
        });
        jPanel1.add(TfValor, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 554, 99, -1));

        BtCadFormaPgto.setText("Cadastrar Forma de Pagamento");
        BtCadFormaPgto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtCadFormaPgtoActionPerformed(evt);
            }
        });
        jPanel1.add(BtCadFormaPgto, new org.netbeans.lib.awtextra.AbsoluteConstraints(557, 553, -1, -1));

        CbBuscaEspecific.setText("Buscar Cliente/Fornecedor Específico");
        CbBuscaEspecific.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbBuscaEspecificActionPerformed(evt);
            }
        });
        jPanel1.add(CbBuscaEspecific, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 7, -1, -1));

        buttonGroup1.add(RbCliente);
        RbCliente.setSelected(true);
        RbCliente.setText("Cliente");
        RbCliente.setEnabled(false);
        RbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RbClienteActionPerformed(evt);
            }
        });
        jPanel1.add(RbCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 30, -1, -1));

        buttonGroup1.add(RbFornecedor);
        RbFornecedor.setText("Fornecedor");
        RbFornecedor.setEnabled(false);
        RbFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RbFornecedorActionPerformed(evt);
            }
        });
        jPanel1.add(RbFornecedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 30, -1, -1));

        TfPessoa.setEditable(false);
        jPanel1.add(TfPessoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(217, 76, 320, -1));

        TfCodPessoa.setEnabled(false);
        TfCodPessoa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TfCodPessoaFocusLost(evt);
            }
        });
        TfCodPessoa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TfCodPessoaKeyReleased(evt);
            }
        });
        jPanel1.add(TfCodPessoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 76, 125, -1));

        BtPesqPessoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/lojadafatima/Icones/buscar.png"))); // NOI18N
        BtPesqPessoa.setEnabled(false);
        BtPesqPessoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtPesqPessoaActionPerformed(evt);
            }
        });
        jPanel1.add(BtPesqPessoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 75, -1, -1));

        LbCodPessoa.setText("Cód. Pessoa");
        jPanel1.add(LbCodPessoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 55, -1, -1));

        LbNomePessoa.setText("Nome/Nome Fantasia");
        jPanel1.add(LbNomePessoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(217, 55, -1, -1));

        BtCadPessoa.setText("Cadastrar Cliente");
        BtCadPessoa.setEnabled(false);
        BtCadPessoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtCadPessoaActionPerformed(evt);
            }
        });
        jPanel1.add(BtCadPessoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 75, 199, -1));

        BtPesqPessoas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/lojadafatima/Icones/buscar.png"))); // NOI18N
        BtPesqPessoas.setText("Buscar");
        BtPesqPessoas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtPesqPessoasActionPerformed(evt);
            }
        });
        jPanel1.add(BtPesqPessoas, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 106, -1, -1));

        ChbOperacao.setText("Operação");
        ChbOperacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChbOperacaoActionPerformed(evt);
            }
        });
        jPanel1.add(ChbOperacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 263, -1, -1));

        CbOperacao.setEnabled(false);
        jPanel1.add(CbOperacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 264, 194, -1));

        TfDtInicial.setEditable(false);
        TfDtInicial.setName("DT_NASC"); // NOI18N
        TfDtInicial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TfDtInicialFocusLost(evt);
            }
        });
        jPanel1.add(TfDtInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 264, 116, -1));

        jLabel3.setText("a");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 267, -1, -1));

        TfDtFinal.setEditable(false);
        TfDtFinal.setName("DT_NASC"); // NOI18N
        TfDtFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TfDtFinalFocusLost(evt);
            }
        });
        jPanel1.add(TfDtFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(522, 264, 116, -1));

        ChbPeriodo.setText("No período");
        ChbPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChbPeriodoActionPerformed(evt);
            }
        });
        jPanel1.add(ChbPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 263, -1, -1));

        BtPesqContas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/lojadafatima/Icones/buscar.png"))); // NOI18N
        BtPesqContas.setText("Buscar");
        BtPesqContas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtPesqContasActionPerformed(evt);
            }
        });
        jPanel1.add(BtPesqContas, new org.netbeans.lib.awtextra.AbsoluteConstraints(657, 262, -1, -1));

        ChbCtaAbertas.setSelected(true);
        ChbCtaAbertas.setText("Contas Abertas");
        jPanel1.add(ChbCtaAbertas, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 237, -1, -1));

        ChbCtaVencidas.setSelected(true);
        ChbCtaVencidas.setText("Contas Vencidas");
        jPanel1.add(ChbCtaVencidas, new org.netbeans.lib.awtextra.AbsoluteConstraints(129, 237, -1, -1));

        ChbCtaPagas.setSelected(true);
        ChbCtaPagas.setText("Contas Pagas");
        jPanel1.add(ChbCtaPagas, new org.netbeans.lib.awtextra.AbsoluteConstraints(252, 237, -1, -1));

        BtPesqTodasPessoas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/lojadafatima/Icones/buscar.png"))); // NOI18N
        BtPesqTodasPessoas.setText("Buscar Contas de Todas as Pessoas");
        BtPesqTodasPessoas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtPesqTodasPessoasActionPerformed(evt);
            }
        });
        jPanel1.add(BtPesqTodasPessoas, new org.netbeans.lib.awtextra.AbsoluteConstraints(101, 106, -1, -1));

        BtImprParcelas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/lojadafatima/Icones/imprimir.png"))); // NOI18N
        BtImprParcelas.setText("Imprimir Parcelas");
        BtImprParcelas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtImprParcelasActionPerformed(evt);
            }
        });
        jPanel1.add(BtImprParcelas, new org.netbeans.lib.awtextra.AbsoluteConstraints(609, 410, -1, -1));

        TfDtPgto.setEnabled(false);
        TfDtPgto.setName("DT_NASC"); // NOI18N
        TfDtPgto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TfDtPgtoFocusLost(evt);
            }
        });
        jPanel1.add(TfDtPgto, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 554, 129, -1));

        jLabel5.setText("Data do Pagamento");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 533, -1, -1));

        LbNotificacao.setText(" ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(LbNotificacao)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LbNotificacao)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 613, 732, -1));
        jPanel1.add(jNumberField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 584, 4, -1));

        BtImprContas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/lojadafatima/Icones/imprimir.png"))); // NOI18N
        BtImprContas.setText("Imprimir Contas");
        BtImprContas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtImprContasActionPerformed(evt);
            }
        });
        jPanel1.add(BtImprContas, new org.netbeans.lib.awtextra.AbsoluteConstraints(472, 410, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void TfValorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TfValorKeyTyped
        valida.limitemaximo(evt, TfValor.getText(), 13);
    }//GEN-LAST:event_TfValorKeyTyped

    private void TbPessoasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TbPessoasMouseReleased
        if (TbPessoas.getSelectedRow() > -1) {
            limpar.Limpar(TbParcelas);
            limpar.Limpar(TbContas);
            if (TbPessoas.getValueAt(TbPessoas.getSelectedRow(), 1).toString().equals("CLIENTE")) {
                ClassePessoaFisica fisica = new ClassePessoaFisica();
                fisica.setNome(TbPessoas.getValueAt(TbPessoas.getSelectedRow(), 0).toString());
                if (fisica.epessoafisica()) {
                    parcelas.getConta().setCodigopessoa(fisica.getPessoa().getCodigo());
                }
            } else {
                ClassePessoaJuridica juridica = new ClassePessoaJuridica();
                juridica.setNomefantasia(TbPessoas.getValueAt(TbPessoas.getSelectedRow(), 0).toString());
                if (juridica.epessoajuridica()) {
                    parcelas.getConta().setCodigopessoa(juridica.getPessoa().getCodigo());
                }
            }
            BtPesqContasActionPerformed(null);
        }
    }//GEN-LAST:event_TbPessoasMouseReleased

    private void TbContasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TbContasMouseReleased
        if (TbContas.getSelectedRow() > -1) {
            limpar.Limpar(TbParcelas);
            parcelas.getConta().setCodigo(Integer.parseInt(TbContas.getValueAt(TbContas.getSelectedRow(), 0).toString()));
            parcelas.getConta().getOperacao().setDescricao(TbContas.getValueAt(TbContas.getSelectedRow(), 1).toString());
            parcelas.getConta().getOperacao().setCodigo(parcelas.getConta().getOperacao().retornacodigooperacao());
            preenche.PreencherJtable(TbParcelas, parcelas.retornaparcelas());
        }
    }//GEN-LAST:event_TbContasMouseReleased

    private void TbParcelasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TbParcelasMouseReleased
        int linha = TbParcelas.getSelectedRow();
        if (linha > -1) {
            if (linha == 0) {
                if (TbParcelas.getValueAt(linha, 6).toString().equals("PAGA")) {
                    TfValor.setEnabled(false);
                    TfDtPgto.setEnabled(false);
                } else {
                    TfValor.setEnabled(true);
                    TfDtPgto.setEnabled(true);
                    TfValor.setText(TbParcelas.getValueAt(linha, 1).toString());
                    TfDtPgto.setText(datas.retornadataatual());
                }
            } else {
                if (TbParcelas.getValueAt((linha - 1), 6).toString().equals("PAGA") && !TbParcelas.getValueAt(linha, 6).toString().equals("PAGA")) {
                    TfValor.setEnabled(true);
                    TfDtPgto.setEnabled(true);
                    TfValor.setText(TbParcelas.getValueAt(linha, 1).toString());
                    TfDtPgto.setText(datas.retornadataatual());
                } else {
                    TfValor.setEnabled(false);
                    TfDtPgto.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_TbParcelasMouseReleased

    private void BtPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtPagarActionPerformed
        boolean pagou = false;
        if (datas.validadatas(TfDtPgto.getText())) {
            if (TbParcelas.getSelectedRow() > -1 && TfValor.getValue() != BigDecimal.valueOf(0) && TfValor.isEnabled()) {
                if (CbFormaPgto.getSelectedItem() != null) {

                    if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja realizar o pagamento desta parcela?", "Deseja pagar esta parcela?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                        parcelas.setCodigo(Integer.parseInt(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 0).toString()));

                        if (!parcelas.pagamentoantesdeaplicacaomulta(TfDtPgto.getText())) {
                            if (Float.parseFloat(TfValor.getValue().toString()) == Float.parseFloat(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 1).toString())) {
                                parcelas.setVlpago(Float.parseFloat(TfValor.getValue().toString()));
                                parcelas.getFormapgto().setFormapgto(CbFormaPgto.getSelectedItem().toString());
                                parcelas.getFormapgto().setCodigo(parcelas.getFormapgto().retornacodigo());
                                parcelas.setDtpago(TfDtPgto.getText());
                                parcelas.pagaparcela();
                                pagou = true;
                                ClasseMvtoCaixa mvtocaixa = new ClasseMvtoCaixa();
                                mvtocaixa.setParcela(parcelas);
                                mvtocaixa.setTpmvto("E");
                                mvtocaixa.setVlmvto(Float.parseFloat(TfValor.getValue().toString()));
                                mvtocaixa.setDsmvto("PAGAMENTO DA PARCELA NRO. " + mvtocaixa.getParcela().getCodigo() + " - " + parcelas.getConta().retornadescricaodaconta());
                                mvtocaixa.incluir();
                            } else if (Float.parseFloat(TfValor.getValue().toString()) > Float.parseFloat(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 1).toString())) {
                                JOptionPane.showMessageDialog(null, "O valor digitado é maior que o valor da parcela!\nPor favor, digite um valor igual ou menor que o valor da parcela.", "Valor digitado incorretamente", JOptionPane.INFORMATION_MESSAGE);
                            } else if (JOptionPane.showConfirmDialog(null, "Tem certeza que este é o valor correto?\n(Caso for pago essa quantia, será gerado uma parcela a mais nesta conta com o valor restante a ser pago pela pessoa)", "Deseja gerar uma reparcela?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                                parcelas.setCodigo(Integer.parseInt(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 0).toString()));
                                parcelas.setVlpago(Float.parseFloat(TfValor.getValue().toString()));
                                parcelas.getFormapgto().setFormapgto(CbFormaPgto.getSelectedItem().toString());
                                parcelas.getFormapgto().setCodigo(parcelas.getFormapgto().retornacodigo());
                                parcelas.setDtpago(TfDtPgto.getText());
                                parcelas.pagaparcela();
                                pagou = true;
                                ClasseMvtoCaixa mvtocaixa = new ClasseMvtoCaixa();
                                mvtocaixa.setParcela(parcelas);
                                mvtocaixa.setTpmvto("E");
                                mvtocaixa.setVlmvto(Float.parseFloat(TfValor.getValue().toString()));
                                mvtocaixa.setDsmvto("PAGAMENTO PARCIAL DA PARCELA NRO. " + mvtocaixa.getParcela().getCodigo() + " - " + parcelas.getConta().retornadescricaodaconta());
                                mvtocaixa.incluir();
                                parcelas.setVlpagar(Float.parseFloat(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 1).toString()) - Float.parseFloat(TfValor.getValue().toString()));
                                parcelas.gerarreparcela();
                            }

                        } else {
                            jNumberField1.setValue(BigDecimal.valueOf(parcelas.getVlpagar()));
                            if (JOptionPane.showConfirmDialog(null, "A data digitada como pagamento da parcela é anterior a data\nde aplicação da multa nesta parcela!\n\n"
                                    + "Deseja realizar o pagamento da parcela em seu valor completo anterior à aplicacao da multa?\n"
                                    + "O valor anterior da parcela era de "+jNumberField1.getText(), "Realizar pagamento com valor anterior à multa?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                                parcelas.voltarvaloresparcela();
                                parcelas.setVlpago(parcelas.getVlpagar());
                                parcelas.getFormapgto().setFormapgto(CbFormaPgto.getSelectedItem().toString());
                                parcelas.getFormapgto().setCodigo(parcelas.getFormapgto().retornacodigo());
                                parcelas.setDtpago(TfDtPgto.getText());
                                parcelas.pagaparcela();
                                pagou = true;
                                ClasseMvtoCaixa mvtocaixa = new ClasseMvtoCaixa();
                                mvtocaixa.setParcela(parcelas);
                                mvtocaixa.setTpmvto("E");
                                mvtocaixa.setVlmvto(Float.parseFloat(TfValor.getValue().toString()));
                                mvtocaixa.setDsmvto("PAGAMENTO DA PARCELA NRO. " + mvtocaixa.getParcela().getCodigo() + " - " + parcelas.getConta().retornadescricaodaconta());
                                mvtocaixa.incluir();
                            } else {
                                if (JOptionPane.showConfirmDialog(null, "A data digitada como pagamento da parcela é anterior a data\nde aplicação da multa nesta parcela!\n\n"
                                        + "Deseja então realizar o pagamento da parcela com o valor digitado?", "Pagar parcela com o valor digitado?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                                    if (Float.parseFloat(TfValor.getValue().toString()) == parcelas.getVlpagar()) {
                                        parcelas.voltarvaloresparcela();
                                        parcelas.setVlpago(parcelas.getVlpagar());
                                        parcelas.getFormapgto().setFormapgto(CbFormaPgto.getSelectedItem().toString());
                                        parcelas.getFormapgto().setCodigo(parcelas.getFormapgto().retornacodigo());
                                        parcelas.setDtpago(TfDtPgto.getText());
                                        parcelas.pagaparcela();
                                        pagou = true;
                                        ClasseMvtoCaixa mvtocaixa = new ClasseMvtoCaixa();
                                        mvtocaixa.setParcela(parcelas);
                                        mvtocaixa.setTpmvto("E");
                                        mvtocaixa.setVlmvto(Float.parseFloat(TfValor.getValue().toString()));
                                        mvtocaixa.setDsmvto("PAGAMENTO DA PARCELA NRO. " + mvtocaixa.getParcela().getCodigo() + " - " + parcelas.getConta().retornadescricaodaconta());
                                        mvtocaixa.incluir();
                                    } else if (Float.parseFloat(TfValor.getValue().toString()) > parcelas.getVlpagar()) {
                                        JOptionPane.showMessageDialog(null, "O valor digitado é maior que o valor da parcela!\nPor favor, digite um valor igual ou menor que o valor da parcela.", "Valor digitado incorretamente", JOptionPane.INFORMATION_MESSAGE);
                                    } else if (JOptionPane.showConfirmDialog(null, "Tem certeza que este é o valor correto?\n(Caso for pago essa quantia, será gerado uma parcela a mais para\nesta conta com o valor restante a ser pago pela pessoa)", "Deseja gerar uma reparcela?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                                        parcelas.voltarvaloresparcela();
                                        parcelas.setVlpago(Float.parseFloat(TfValor.getValue().toString()));
                                        parcelas.getFormapgto().setFormapgto(CbFormaPgto.getSelectedItem().toString());
                                        parcelas.getFormapgto().setCodigo(parcelas.getFormapgto().retornacodigo());
                                        parcelas.setDtpago(TfDtPgto.getText());
                                        parcelas.pagaparcela();
                                        pagou = true;
                                        ClasseMvtoCaixa mvtocaixa = new ClasseMvtoCaixa();
                                        mvtocaixa.setParcela(parcelas);
                                        mvtocaixa.setTpmvto("E");
                                        mvtocaixa.setVlmvto(Float.parseFloat(TfValor.getValue().toString()));
                                        mvtocaixa.setDsmvto("PAGAMENTO PARCIAL DA PARCELA NRO. " + mvtocaixa.getParcela().getCodigo() + " - " + parcelas.getConta().retornadescricaodaconta());
                                        mvtocaixa.incluir();
                                        parcelas.setVlpagar(parcelas.getVlpagar() - Float.parseFloat(TfValor.getValue().toString()));
                                        parcelas.gerarreparcela();
                                    }
                                }
                            }
                        }

                    }

                } else {
                    msg.CampoNaoPreenchido(LbNotificacao, "Selecione ou insira a forma de pagamento escolhida pela pessoa!");
                    CbFormaPgto.grabFocus();
                }
            } else {
                msg.CampoNaoPreenchido(LbNotificacao, "Selecione a parcela que será paga e o valor correto a ser pago!");
                TfValor.grabFocus();
            }
        } else {
            msg.CampoNaoPreenchido(LbNotificacao, "Digite a data de pagamento da parcela!");
            TfDtPgto.grabFocus();
        }
        if (pagou) {
            parcelas.atualizaparcelasecontas();
            TbContasMouseReleased(null);
            buscarcontaatualizacao();
            HashMap filtro = new HashMap();
            filtro.put("CD_OPERACAO", parcelas.getConta().getOperacao().getCodigo());
            filtro.put("CD_CONTA", parcelas.getConta().getCodigo());
            filtro.put("DS_RELATORIO", "PAGAMENTO DE PARCELA");
            ConexaoPostgre conexao = new ConexaoPostgre();
            JDialog dialog = new JDialog(new javax.swing.JFrame(), "Visualização - Software Loja da Fátima", true);
            dialog.setSize(1000, 700);
            dialog.setLocationRelativeTo(null);
            try {
                JasperPrint print = JasperFillManager.fillReport("relatorios\\parcelapaga.jasper", filtro, conexao.conecta());

                JasperViewer viewer = new JasperViewer(print, true);
                dialog.getContentPane().add(viewer.getContentPane());
                dialog.setVisible(true);
            } catch (Exception ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_BtPagarActionPerformed

    private void BtCadFormaPgtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtCadFormaPgtoActionPerformed
        final InterfaceFormaPagto tela = new InterfaceFormaPagto(getPrimeiratela(), true, getTelasusuario());
        tela.setVisible(true);
        tela.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                preenche.PreencheJComboBox(CbFormaPgto, parcelas.getFormapgto().retornaformapgtocombobox());
            }
        });
    }//GEN-LAST:event_BtCadFormaPgtoActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        boolean estornou = false;
        if (TbParcelas.getSelectedRow() > -1) {
            if (TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 6).toString().equals("PAGA")) {
                if (Integer.parseInt(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 0).toString()) != parcelas.retornanumeroultimaparcelavalida()) {
                    if (!TbParcelas.getValueAt(TbParcelas.getSelectedRow() + 1, 6).toString().equals("PAGA")) {
                        if (JOptionPane.showConfirmDialog(null, "Deseja realmente estornar esta parcela?\n"
                                + "(Fazendo isso você estará retirando do caixa o valor pago nesta parcela)", "Deseja estornar?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                            ClasseMvtoCaixa mvtocaixa = new ClasseMvtoCaixa();
                            if (!(mvtocaixa.retornacaixaatual() < Float.parseFloat(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 2).toString()))) {
                                parcelas.setCodigo(Integer.parseInt(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 0).toString()));
                                parcelas.setVlpagar(Float.parseFloat(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 2).toString()));
                                parcelas.estornarparcela();
                                estornou = true;
                                parcelas.setVlpagar(Float.parseFloat(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 2).toString()));
                                mvtocaixa.setParcela(parcelas);
                                mvtocaixa.setTpmvto("S");
                                mvtocaixa.setVlmvto(parcelas.getVlpagar());
                                mvtocaixa.setDsmvto("ESTORNO DA PARCELA NRO. " + mvtocaixa.getParcela().getCodigo() + " - " + parcelas.getConta().retornadescricaodaconta());
                                mvtocaixa.incluir();
                            } else {
                                JOptionPane.showMessageDialog(null, "Impossível realizar o estorno desta parcela.\nO saldo do caixa é menor que o valor a ser pago!", "Saldo do caixa insuficiente", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    }
                } else {
                    if (JOptionPane.showConfirmDialog(null, "Deseja realmente estornar esta parcela?\n"
                            + "(Fazendo isso você estará retirando do caixa o valor pago nesta parcela)", "Deseja estornar?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                        ClasseMvtoCaixa mvtocaixa = new ClasseMvtoCaixa();
                        if (!(mvtocaixa.retornacaixaatual() < Float.parseFloat(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 2).toString()))) {
                            parcelas.setCodigo(Integer.parseInt(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 0).toString()));
                            parcelas.setVlpagar(Float.parseFloat(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 2).toString()));
                            parcelas.estornarparcela();
                            estornou = true;
                            parcelas.setVlpagar(Float.parseFloat(TbParcelas.getValueAt(TbParcelas.getSelectedRow(), 2).toString()));
                            mvtocaixa.setParcela(parcelas);
                            mvtocaixa.setTpmvto("S");
                            mvtocaixa.setVlmvto(parcelas.getVlpagar());
                            mvtocaixa.setDsmvto("ESTORNO DA PARCELA NRO. " + mvtocaixa.getParcela().getCodigo() + " - " + parcelas.getConta().retornadescricaodaconta());
                            mvtocaixa.incluir();
                        } else {
                            JOptionPane.showMessageDialog(null, "Impossível realizar o estorno desta parcela.\nO saldo do caixa é menor que o valor a ser pago!", "Saldo do caixa insuficiente", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }
            }
        }
        if (estornou) {
            parcelas.atualizaparcelasecontas();
            TbContasMouseReleased(null);
            buscarcontaatualizacao();
            HashMap filtro = new HashMap();
            filtro.put("CD_OPERACAO", parcelas.getConta().getOperacao().getCodigo());
            filtro.put("CD_CONTA", parcelas.getConta().getCodigo());
            filtro.put("DS_RELATORIO", "ESTORNO DE PARCELA");
            ConexaoPostgre conexao = new ConexaoPostgre();
            JDialog dialog = new JDialog(new javax.swing.JFrame(), "Visualização - Software Loja da Fátima", true);
            dialog.setSize(1000, 700);
            dialog.setLocationRelativeTo(null);
            try {
                JasperPrint print = JasperFillManager.fillReport("relatorios\\parcelapaga.jasper", filtro, conexao.conecta());

                JasperViewer viewer = new JasperViewer(print, true);
                dialog.getContentPane().add(viewer.getContentPane());
                dialog.setVisible(true);
            } catch (Exception ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void ItMnDetalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItMnDetalhesActionPerformed
        if (TbContas.getSelectedRow() > -1) {
            final ConsulSimplesDetalhesConta tela = new ConsulSimplesDetalhesConta(getPrimeiratela(), true, parcelas);
            tela.setVisible(true);
            tela.addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosed(java.awt.event.WindowEvent evt) {

                }
            });
        }
    }//GEN-LAST:event_ItMnDetalhesActionPerformed

    private void ItMnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItMnCancelarActionPerformed
        if (!parcelapaga()) {
            if (JOptionPane.showConfirmDialog(null, "Você está prestes a cancelar esta conta.\nCaso haja produtos envolvidos nessa operação, a situação do estoque será revertido!\n\nTem certeza que deseja cancelar?", "Deseja cancelar operação?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                parcelas.getConta().retornainformacoesconta();
                if (parcelas.getConta().getCompravenda().getCodigo() != 0) {
                    ClasseProdutosCompraVenda prodcompravenda = new ClasseProdutosCompraVenda();
                    prodcompravenda.getCompravenda().setCodigo(parcelas.getConta().getCompravenda().getCodigo());
                    prodcompravenda.getCompravenda().getOperacao().setCodigo(parcelas.getConta().getOperacao().getCodigo());
                    prodcompravenda.getCompravenda().getOperacao().retornaoperacao();
                    if (prodcompravenda.getCompravenda().getOperacao().getTpestoque().equals("E")) {
                        if (prodcompravenda.estoquedisponiveldetodososprodutos()) {
                            parcelas.getConta().cancelarconta();
                            prodcompravenda.getCompravenda().cancelarcompravenda();
                            prodcompravenda.reverterestoqueprodutos();
                            TbPessoasMouseReleased(null);
                        } else {
                            JOptionPane.showMessageDialog(null, "Nao é possivel realizar o cancelamento desta operação!\nOs produtos dessa operação tem estoque disponível menor que a quantidade para devolução.", "Cancelamento de operação não permitido", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        parcelas.getConta().cancelarconta();
                        prodcompravenda.getCompravenda().cancelarcompravenda();
                        prodcompravenda.reverterestoqueprodutos();
                        TbPessoasMouseReleased(null);
                    }
                } else {
                    parcelas.getConta().cancelarconta();
                    TbPessoasMouseReleased(null);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Faça estorno de todas as parcelas desta conta para que o cancelamento seja realizado!", "Existem parcelas pagas", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_ItMnCancelarActionPerformed

    private void TfCodPessoaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TfCodPessoaFocusLost

    }//GEN-LAST:event_TfCodPessoaFocusLost

    private void TfCodPessoaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TfCodPessoaKeyReleased
        limpar.Limpar(TbPessoas);
        limpar.Limpar(TbContas);
        limpar.Limpar(TbParcelas);
        if (RbCliente.isSelected()) {
            if (!TfCodPessoa.getText().equals("")) {
                cliente.setCodigo(Integer.parseInt(TfCodPessoa.getText()));
                if (cliente.eativo()) {
                    TfPessoa.setText(cliente.retornanomecliente());
                } else {
                    TfPessoa.setText("");
                }
            } else {
                TfPessoa.setText("");
            }
        } else {
            if (!TfCodPessoa.getText().equals("")) {
                fornecedor.setCodigo(Integer.parseInt(TfCodPessoa.getText()));
                if (fornecedor.efornecedorativo()) {
                    fornecedor.getPessoajur().getPessoa().setCodigo(fornecedor.retornacodigopessoafornecedor());
                    TfPessoa.setText(fornecedor.getPessoajur().retornanomeporCodigo());
                } else {
                    TfPessoa.setText("");
                }
            } else {
                TfPessoa.setText("");
            }
        }
    }//GEN-LAST:event_TfCodPessoaKeyReleased

    private void BtPesqPessoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtPesqPessoaActionPerformed
        if (RbCliente.isSelected()) {
            final ConsulSimplesCliente tela = new ConsulSimplesCliente(getPrimeiratela(), true, cliente);
            tela.setVisible(true);
            tela.addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosed(java.awt.event.WindowEvent evt) {
                    if (cliente.getCodigo() != 0) {
                        TfCodPessoa.setText("" + cliente.getCodigo());
                        TfCodPessoaKeyReleased(null);
                    } else {
                        TfCodPessoa.setText("");
                        TfPessoa.setText("");
                    }
                }
            });
        } else {
            final ConsulSimplesFornecedor tela = new ConsulSimplesFornecedor(getPrimeiratela(), true, fornecedor);
            tela.setVisible(true);
            tela.addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosed(java.awt.event.WindowEvent evt) {
                    if (fornecedor.getCodigo() != 0) {
                        TfCodPessoa.setText("" + fornecedor.getCodigo());
                        TfCodPessoaKeyReleased(null);
                    } else {
                        TfCodPessoa.setText("");
                        TfPessoa.setText("");
                    }
                }
            });
        }
    }//GEN-LAST:event_BtPesqPessoaActionPerformed

    private void BtCadPessoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtCadPessoaActionPerformed
        if (RbCliente.isSelected()) {
            final InterfaceCliente tela = new InterfaceCliente(getPrimeiratela(), true, getTelasusuario());
            tela.setVisible(true);
            tela.addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosed(java.awt.event.WindowEvent evt) {

                }
            });
        } else {
            final InterfaceFornecedor tela = new InterfaceFornecedor(getPrimeiratela(), true, getTelasusuario());
            tela.setVisible(true);
            tela.addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosed(java.awt.event.WindowEvent evt) {

                }
            });
        }
    }//GEN-LAST:event_BtCadPessoaActionPerformed

    private void RbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RbClienteActionPerformed
        if (RbCliente.isSelected()) {
            LbCodPessoa.setText("Cód. Cliente");
            LbNomePessoa.setText("Cliente");
            BtCadPessoa.setText("Cadastrar Cliente");
        } else {
            LbCodPessoa.setText("Cód. Fornecedor");
            LbNomePessoa.setText("Fornecedor");
            BtCadPessoa.setText("Cadastrar Fornecedor");
        }
        analisausuario();
        TfCodPessoaKeyReleased(null);
    }//GEN-LAST:event_RbClienteActionPerformed

    private void RbFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RbFornecedorActionPerformed
        if (RbCliente.isSelected()) {
            LbCodPessoa.setText("Cód. Cliente");
            LbNomePessoa.setText("Cliente");
            BtCadPessoa.setText("Cadastrar Cliente");
        } else {
            LbCodPessoa.setText("Cód. Fornecedor");
            LbNomePessoa.setText("Fornecedor");
            BtCadPessoa.setText("Cadastrar Fornecedor");
        }
        analisausuario();
        TfCodPessoaKeyReleased(null);
    }//GEN-LAST:event_RbFornecedorActionPerformed

    private void CbBuscaEspecificActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbBuscaEspecificActionPerformed
        RbCliente.setEnabled(CbBuscaEspecific.isSelected());
        RbFornecedor.setEnabled(CbBuscaEspecific.isSelected());
        TfCodPessoa.setEnabled(CbBuscaEspecific.isSelected());
        BtPesqPessoa.setEnabled(CbBuscaEspecific.isSelected());
        BtCadPessoa.setEnabled(CbBuscaEspecific.isSelected());
    }//GEN-LAST:event_CbBuscaEspecificActionPerformed

    private void BtPesqPessoasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtPesqPessoasActionPerformed
        if (!CbBuscaEspecific.isSelected()) {
            limpar.Limpar(TbContas);
            limpar.Limpar(TbParcelas);
            limpar.Limpar(TbPessoas);
            preenche.PreencherJtable(TbPessoas, parcelas.getConta().retornatodasaspessoa());
        } else {
            if (!TfCodPessoa.getText().equals("") && !TfPessoa.getText().equals("")) {
                limpar.Limpar(TbContas);
                limpar.Limpar(TbParcelas);
                limpar.Limpar(TbPessoas);
                if (RbCliente.isSelected()) {
                    preenche.PreencherJtable(TbPessoas, parcelas.getConta().retornacliente(Integer.parseInt(TfCodPessoa.getText())));
                } else {
                    preenche.PreencherJtable(TbPessoas, parcelas.getConta().retornafornecedor(Integer.parseInt(TfCodPessoa.getText())));
                }
            } else {
                limpar.Limpar(TbContas);
                limpar.Limpar(TbParcelas);
                limpar.Limpar(TbPessoas);
                if (RbCliente.isSelected()) {
                    preenche.PreencherJtable(TbPessoas, parcelas.getConta().retornatodososcliente());
                } else {
                    preenche.PreencherJtable(TbPessoas, parcelas.getConta().retornatodososfornecedor());
                }
            }
        }
    }//GEN-LAST:event_BtPesqPessoasActionPerformed

    private void TfDtInicialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TfDtInicialFocusLost
        if (valida.CampoTotalmentePreenchido(TfDtInicial.getText())) {
            if (datas.validadatas(TfDtInicial.getText())) {

            } else {
                TfDtInicial.setValue(null);
            }
        }
    }//GEN-LAST:event_TfDtInicialFocusLost

    private void TfDtFinalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TfDtFinalFocusLost
        if (valida.CampoTotalmentePreenchido(TfDtFinal.getText())) {
            if (datas.validadatas(TfDtFinal.getText())) {

            } else {
                TfDtFinal.setValue(null);
            }
        }
    }//GEN-LAST:event_TfDtFinalFocusLost

    private void ChbOperacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChbOperacaoActionPerformed
        CbOperacao.setEnabled(ChbOperacao.isSelected());
    }//GEN-LAST:event_ChbOperacaoActionPerformed

    private void ChbPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChbPeriodoActionPerformed
        TfDtInicial.setEditable(ChbPeriodo.isSelected());
        TfDtFinal.setEditable(ChbPeriodo.isSelected());
    }//GEN-LAST:event_ChbPeriodoActionPerformed

    private void BtPesqContasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtPesqContasActionPerformed
        limpar.Limpar(TbParcelas);
        String tp1, tp2, tp3, data_ini, data_fim;
        int cdoperacao;
        if (ChbCtaAbertas.isSelected()) {
            tp1 = "A";
        } else {
            tp1 = "";
        }
        if (ChbCtaPagas.isSelected()) {
            tp2 = "P";
        } else {
            tp2 = "";
        }
        if (ChbCtaVencidas.isSelected()) {
            tp3 = "V";
        } else {
            tp3 = "";
        }
        if (ChbPeriodo.isSelected() && datascorretas(TfDtInicial.getText(), TfDtFinal.getText(), false)) {
            data_ini = TfDtInicial.getText();
            data_fim = TfDtFinal.getText();
        } else {
            data_ini = "";
            data_fim = "";
        }
        if (ChbOperacao.isSelected()) {
            parcelas.getConta().getOperacao().setDescricao(CbOperacao.getSelectedItem().toString());
            cdoperacao = parcelas.getConta().getOperacao().retornacodigooperacao();
        } else {
            cdoperacao = 0;
        }
        preenche.PreencherJtable(TbContas, parcelas.getConta().retornacontas(tp1, tp2, tp3, data_ini, data_fim, cdoperacao, "E"));
    }//GEN-LAST:event_BtPesqContasActionPerformed

    private void BtPesqTodasPessoasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtPesqTodasPessoasActionPerformed
        parcelas.getConta().setCodigopessoa(0);
        BtPesqContasActionPerformed(evt);
    }//GEN-LAST:event_BtPesqTodasPessoasActionPerformed

    private void BtImprParcelasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtImprParcelasActionPerformed
        if (TbParcelas.getRowCount() > 0) {
            HashMap filtro = new HashMap();
            filtro.put("CD_OPERACAO", parcelas.getConta().getOperacao().getCodigo());
            filtro.put("CD_CONTA", parcelas.getConta().getCodigo());
            filtro.put("DS_RELATORIO", "RELATORIO DAS PARCELAS");
            ConexaoPostgre conexao = new ConexaoPostgre();
            JDialog dialog = new JDialog(new javax.swing.JFrame(), "Visualização - Software Loja da Fátima", true);
            dialog.setSize(1000, 700);
            dialog.setLocationRelativeTo(null);
            try {
                JasperPrint print = JasperFillManager.fillReport("relatorios\\parcelapaga.jasper", filtro, conexao.conecta());

                JasperViewer viewer = new JasperViewer(print, true);
                dialog.getContentPane().add(viewer.getContentPane());
                dialog.setVisible(true);
            } catch (Exception ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_BtImprParcelasActionPerformed

    private void TfDtPgtoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TfDtPgtoFocusLost
        if (valida.CampoTotalmentePreenchido(TfDtPgto.getText())) {
            if (datas.validadatas(TfDtPgto.getText()) && datascorretas(TfDtPgto.getText(), datas.retornadataatual(), true)) {

            } else {
                TfDtPgto.setValue(null);
            }
        }
    }//GEN-LAST:event_TfDtPgtoFocusLost

    private void BtImprContasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtImprContasActionPerformed
        if (TbContas.getRowCount() > 0){
            String relatorio = "relatorios\\relatoriocontas.jasper", descricao2 = "";
            HashMap filtro = new HashMap();
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            if(!ChbPeriodo.isSelected() && !ChbOperacao.isSelected() && parcelas.getConta().getCodigopessoa() == 0){
                relatorio = "relatorios\\relatoriocontas.jasper";
            }
            if(ChbPeriodo.isSelected() && !ChbOperacao.isSelected() && parcelas.getConta().getCodigopessoa() == 0){
                relatorio = "relatorios\\relatoriocontasdata.jasper";
                try {
                    filtro.put("DT_INICIAL", format.parse(TfDtInicial.getText()));
                    filtro.put("DT_FINAL", format.parse(TfDtFinal.getText()));
                } catch (ParseException ex) {
                }
            }
            if(!ChbPeriodo.isSelected() && ChbOperacao.isSelected() && parcelas.getConta().getCodigopessoa() == 0){
                relatorio = "relatorios\\relatoriocontasoperacao.jasper";
                parcelas.getConta().getOperacao().setDescricao(CbOperacao.getSelectedItem().toString());
                filtro.put("CD_OPERACAO", parcelas.getConta().getOperacao().retornacodigooperacao());
            }
            if(!ChbPeriodo.isSelected() && !ChbOperacao.isSelected() && parcelas.getConta().getCodigopessoa() != 0){
                relatorio = "relatorios\\relatoriocontaspessoa.jasper";
                filtro.put("CD_PESSOA", parcelas.getConta().getCodigopessoa());
            }
            if(ChbPeriodo.isSelected() && ChbOperacao.isSelected() && parcelas.getConta().getCodigopessoa() == 0){
                relatorio = "relatorios\\relatoriocontasdataoperacao.jasper";
                parcelas.getConta().getOperacao().setDescricao(CbOperacao.getSelectedItem().toString());
                filtro.put("CD_OPERACAO", parcelas.getConta().getOperacao().retornacodigooperacao());
                try {
                    filtro.put("DT_INICIAL", format.parse(TfDtInicial.getText()));
                    filtro.put("DT_FINAL", format.parse(TfDtFinal.getText()));
                } catch (ParseException ex) {
                }
            }
            if(ChbPeriodo.isSelected() && !ChbOperacao.isSelected() && parcelas.getConta().getCodigopessoa() != 0){
                relatorio = "relatorios\\relatoriocontasdatapessoa.jasper";
                filtro.put("CD_PESSOA", parcelas.getConta().getCodigopessoa());
                try {
                    filtro.put("DT_INICIAL", format.parse(TfDtInicial.getText()));
                    filtro.put("DT_FINAL", format.parse(TfDtFinal.getText()));
                } catch (ParseException ex) {
                }
            }
            if(!ChbPeriodo.isSelected() && ChbOperacao.isSelected() && parcelas.getConta().getCodigopessoa() != 0){
                relatorio = "relatorios\\relatoriocontasoperacaopessoa.jasper";
                filtro.put("CD_PESSOA", parcelas.getConta().getCodigopessoa());
                parcelas.getConta().getOperacao().setDescricao(CbOperacao.getSelectedItem().toString());
                filtro.put("CD_OPERACAO", parcelas.getConta().getOperacao().retornacodigooperacao());
            }
            if(ChbPeriodo.isSelected() && ChbOperacao.isSelected() && parcelas.getConta().getCodigopessoa() != 0){
                relatorio = "relatorios\\relatoriocontasdatapessoaoperacao.jasper";
                filtro.put("CD_PESSOA", parcelas.getConta().getCodigopessoa());
                parcelas.getConta().getOperacao().setDescricao(CbOperacao.getSelectedItem().toString());
                filtro.put("CD_OPERACAO", parcelas.getConta().getOperacao().retornacodigooperacao());
                try {
                    filtro.put("DT_INICIAL", format.parse(TfDtInicial.getText()));
                    filtro.put("DT_FINAL", format.parse(TfDtFinal.getText()));
                } catch (ParseException ex) {
                }
            }
            
            if (ChbCtaAbertas.isSelected()) {
                filtro.put("TP1", "A");
            } else {
                filtro.put("TP1", "");
            }
            if (ChbCtaPagas.isSelected()) {
                filtro.put("TP2", "P");
            } else {
                filtro.put("TP2", "");
            }
            if (ChbCtaVencidas.isSelected()) {
                filtro.put("TP3", "V");
            } else {
                filtro.put("TP3", "");
            }
            
            if(!ChbCtaAbertas.isSelected() && !ChbCtaPagas.isSelected() && ChbCtaVencidas.isSelected()){
                descricao2 = "Contas Vencidas";
            }
            if(!ChbCtaAbertas.isSelected() && ChbCtaPagas.isSelected() && !ChbCtaVencidas.isSelected()){
                descricao2 = "Contas Pagas";
            }
            if(ChbCtaAbertas.isSelected() && !ChbCtaPagas.isSelected() && !ChbCtaVencidas.isSelected()){
                descricao2 = "Contas Abertas";
            }
            if(ChbCtaAbertas.isSelected() && ChbCtaPagas.isSelected() && !ChbCtaVencidas.isSelected()){
                descricao2 = "Contas Abertas e Pagas";
            }
            if(ChbCtaAbertas.isSelected() && !ChbCtaPagas.isSelected() && ChbCtaVencidas.isSelected()){
                descricao2 = "Contas Abertas e Vencidas";
            }
            if(!ChbCtaAbertas.isSelected() && ChbCtaPagas.isSelected() && ChbCtaVencidas.isSelected()){
                descricao2 = "Contas Pagas e Vencidas";
            }
            if(ChbCtaAbertas.isSelected() && ChbCtaPagas.isSelected() && ChbCtaVencidas.isSelected()){
                descricao2 = "Contas Abertas, Pagas e Vencidas";
            }
            
            if(ChbPeriodo.isSelected()){
                if(TfDtInicial.getText().equals(TfDtFinal.getText())){
                    descricao2 += " de parcelas com vencimento dia "+TfDtInicial.getText();
                } else{
                    descricao2 += " de parcelas com vencimento do dia "+TfDtInicial.getText()+" ao "+TfDtFinal.getText();
                }
            }
            
            if(parcelas.getConta().getCodigopessoa() != 0){
                descricao2 += " de "+TfPessoa.getText();
            }
            
            filtro.put("DS_RELATORIO2", descricao2);
            filtro.put("TP_CONTA", "E");
            filtro.put("DS_RELATORIO", "Relatório das Contas à Receber");
            
            ConexaoPostgre conexao = new ConexaoPostgre();
            JDialog dialog = new JDialog(new javax.swing.JFrame(), "Visualização - Software Loja da Fátima", true);
            dialog.setSize(1000, 700);
            dialog.setLocationRelativeTo(null);
            try {
                JasperPrint print = JasperFillManager.fillReport(relatorio, filtro, conexao.conecta());

                JasperViewer viewer = new JasperViewer(print, true);
                dialog.getContentPane().add(viewer.getContentPane());
                dialog.setVisible(true);
            } catch (Exception ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_BtImprContasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtCadFormaPgto;
    private javax.swing.JButton BtCadPessoa;
    private javax.swing.JButton BtImprContas;
    private javax.swing.JButton BtImprParcelas;
    private javax.swing.JButton BtPagar;
    private javax.swing.JButton BtPesqContas;
    private javax.swing.JButton BtPesqPessoa;
    private javax.swing.JButton BtPesqPessoas;
    private javax.swing.JButton BtPesqTodasPessoas;
    private javax.swing.JCheckBox CbBuscaEspecific;
    private javax.swing.JComboBox CbFormaPgto;
    private javax.swing.JComboBox CbOperacao;
    private javax.swing.JCheckBox ChbCtaAbertas;
    private javax.swing.JCheckBox ChbCtaPagas;
    private javax.swing.JCheckBox ChbCtaVencidas;
    private javax.swing.JCheckBox ChbOperacao;
    private javax.swing.JCheckBox ChbPeriodo;
    private javax.swing.JMenuItem ItMnCancelar;
    private javax.swing.JMenuItem ItMnDetalhes;
    private javax.swing.JLabel LbCodPessoa;
    private javax.swing.JLabel LbNomePessoa;
    private javax.swing.JLabel LbNotificacao;
    private javax.swing.JPopupMenu PopDetalhes;
    private javax.swing.JRadioButton RbCliente;
    private javax.swing.JRadioButton RbFornecedor;
    private javax.swing.JTable TbContas;
    private javax.swing.JTable TbParcelas;
    private javax.swing.JTable TbPessoas;
    private javax.swing.JTextField TfCodPessoa;
    private javax.swing.JFormattedTextField TfDtFinal;
    private javax.swing.JFormattedTextField TfDtInicial;
    private javax.swing.JFormattedTextField TfDtPgto;
    private javax.swing.JTextField TfPessoa;
    private JNumberField.JNumberField TfValor;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuItem jMenuItem1;
    private JNumberField.JNumberField jNumberField1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    public void analisausuario() {
        getTelasusuario().getTela().setCodigo(17);
        if (!getTelasusuario().eadmintela()) {
            BtPagar.setVisible(false);
        }

        getTelasusuario().getTela().setCodigo(7);
        if (!getTelasusuario().eadmintela()) {
            BtCadFormaPgto.setVisible(false);
        }
    }

    public boolean parcelapaga() {
        for (int i = 0; i < TbParcelas.getRowCount(); i++) {
            if (TbParcelas.getValueAt(i, 6).toString().equals("PAGA")) {
                return true;
            }
        }
        return false;
    }

    public boolean datascorretas(String data1, String data2, boolean analisa) {
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        format.setLenient(false);
        Date date1 = null, date2 = null;
        try {
            date1 = format.parse(data1);
            date2 = format.parse(data2);
        } catch (ParseException ex) {
            return false;
        }
        if(analisa && date1.equals(date2)) return true;
        if (date1.after(date2)) {
            return false;
        }

        return true;
    }

    public java.awt.Frame getPrimeiratela() {
        return primeiratela;
    }

    public void setPrimeiratela(java.awt.Frame primeiratela) {
        this.primeiratela = primeiratela;
    }

    public ClasseTelasUsuario getTelasusuario() {
        return telasusuario;
    }

    public void setTelasusuario(ClasseTelasUsuario telasusuario) {
        this.telasusuario = telasusuario;
    }

    private void buscarcontaatualizacao() {
        for (int i = 0; i < TbContas.getRowCount(); i++) {
            if ((Integer.parseInt(TbContas.getValueAt(i, 0).toString()) == parcelas.getConta().getCodigo()) && (TbContas.getValueAt(i, 1).toString().equals(parcelas.getConta().getOperacao().getDescricao()))) {
                TbContas.setRowSelectionInterval(i, i);
                TbContasMouseReleased(null);
            }
        }
    }
}
